// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package dnclient generated by go-bindata.// sources:
// init/windows/application.ico
package dnclient

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initWindowsApplicationIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x4f\x88\x1c\xc5\x1b\xed\x9e\x39\x04\x7e\x97\xfd\x9d\xbc\x46\x61\x03\x9e\xa2\xa7\x48\xf4\x90\x5c\xf4\x16\xbd\xe8\x45\x73\x51\x30\x21\x07\x05\x0d\x09\x78\xca\xc4\x04\x84\x48\x3c\x89\x1a\x04\x3d\xc9\x22\x21\x07\x85\xa8\x18\xd4\x41\x77\x15\x72\x88\x9b\xbf\x86\x49\xc8\x24\xa3\x4c\xdc\x65\x85\x04\x59\x08\x71\xd8\x92\xd7\x33\x6f\x78\xf3\xed\x57\xdd\x3d\x3b\xd3\x71\xe0\xdb\x9a\xe9\xae\xae\xaa\xf7\xbe\xbf\x55\xbd\x49\x92\x26\x69\xb2\x73\x2b\xda\x87\x93\x8f\x1e\x4b\x92\x87\x92\x24\x79\x34\x49\x92\x9d\x49\x92\xec\x4e\xfa\xd7\xb3\xcf\xd6\xa4\x92\xcf\x9e\x3d\xbb\xfe\x67\x25\x76\x7d\xda\x52\x0d\xa2\x62\xbc\x68\xb7\x6d\xdb\xf6\x08\xe5\xe8\xd1\xc6\x93\x6c\xab\x14\x9d\x8b\xf2\xa0\xb9\xc0\x9c\xa7\x4f\xcd\x1d\xb9\xb2\x78\xb6\x05\x69\x5f\x3d\xbf\x06\xe9\xde\x6c\x05\xc8\xca\xed\x4e\x26\x77\xff\x5a\xca\x64\xf5\xef\xbb\x43\xe9\xfd\x73\x3f\x2a\xda\x0f\xcf\x71\x1c\x8e\xcb\x79\x20\x57\x17\x7f\x59\xc3\xdc\xdf\x9f\x3e\xf9\x35\xf9\xa8\x9a\x03\x8c\x8f\x79\x6e\xb5\x2e\x7f\xc8\x35\x72\x9d\xfc\xee\x61\x2e\xc2\x9d\xc7\x81\xce\x61\xf9\x80\xe0\x1e\x78\x78\xeb\xc0\xeb\x07\xab\xe6\x80\xd8\x31\x27\xf5\x5c\x84\xdb\x72\x10\xe3\x22\xf6\x0c\xc7\xf4\xb8\xa0\x4d\xe0\x3b\x38\x98\x99\x99\x79\xa6\x0a\x0e\xe8\x5f\xb0\x79\xce\xcd\xf5\x2d\xdf\xee\xb4\x97\xff\xf8\xb3\xd9\xfd\x7d\x79\x61\xa9\xb3\x72\x79\xa9\xb3\x72\xbb\xd3\xea\xae\x76\x5a\xdd\xde\xc2\xad\x73\x61\x42\xc1\x18\xab\xad\x0b\xed\xee\xb5\x0b\xed\x4b\xd7\xce\x5f\x9f\xbf\x7e\xf1\x6a\xf3\xc6\x6f\x17\x6f\xc0\xfe\x81\x9d\xba\x80\xc0\x17\xa6\xcd\x01\xb1\xc3\xc7\xa8\x73\xe8\x0b\xed\xe1\x46\x63\x7e\x76\xcb\x6c\x80\xa4\xb5\x74\x9d\x6c\x7a\xfa\xff\x13\x8b\x37\x6e\x26\x69\xfa\xd3\xf6\xed\x4f\x84\xcf\xe7\x3e\x1b\xf1\x07\x72\x30\xad\x98\x48\xec\xe4\x1a\x3a\x07\xf6\xe7\x9e\xdd\x85\x35\x0c\xf1\xab\x60\xdd\x8f\x1f\x7b\x6a\x28\xcf\x9f\x7b\x71\x6c\xd1\xe7\x31\xde\xba\x79\x66\x67\xe7\xd3\xb4\x16\x20\xef\x1d\x3f\x3e\xc2\x01\xec\x74\x5a\x36\x80\x71\xe0\x5b\xeb\xb1\xd7\x28\xed\xb4\x9e\x36\xd3\x34\x5d\x48\x6b\xe9\xe5\xb4\x96\x76\xd3\x5a\xba\x9a\xd6\xd2\xde\x14\xf4\xdf\x1b\x8c\xd5\xcd\xc6\xc6\x1c\xd9\x5c\xb5\xb6\xcc\x3f\xe4\x80\x31\x01\xbe\x31\xa9\x1f\x68\xac\xd7\xd8\xb6\xff\xcd\x37\xb2\xf9\x0e\x37\x1a\xe1\xd7\x85\x6f\xb3\xb9\x54\x34\x47\x69\x4e\xb4\xb9\x91\xb1\x33\x16\xd7\xed\x38\x3a\x07\xe6\xa5\x00\x37\x39\x80\x2f\x70\xcc\x49\xe3\x21\x9e\x59\xfc\xf9\xcc\x2b\x5c\x27\x7c\x1e\xe3\x73\x1e\x8b\x63\x1a\xb9\xcf\xcb\x07\x65\x72\xe0\x99\xaf\xbe\x18\x72\x80\xef\xec\xb3\xd1\x58\x80\xbe\x78\x8e\x76\x8f\xf5\x80\x6b\x8c\x7f\xe2\xc4\x09\x57\x87\x45\x39\x70\x23\xf9\xdf\xe2\xb7\x1c\x28\x0f\xe4\x00\x31\x11\x36\x82\x7b\xb0\x9b\x71\xeb\x02\x5b\xe3\x40\x30\x0e\x6d\x5e\xf3\xbe\xcd\xeb\xf6\x7b\x99\x7c\xee\x61\xf4\xc4\xf3\x17\xcb\x01\xed\x73\xef\x9e\x57\x47\x6a\xa3\xb2\x7e\x60\xf3\x3c\xd7\x8c\xf1\x10\xf3\x58\x6b\xe4\xe9\xa7\xcc\x7a\xb9\x66\x6b\xc7\x79\xfe\x1f\x8b\x05\xd4\x35\xf5\x0d\x1d\x69\x3c\x54\x3f\x28\xe2\xc0\xe6\x3a\xe8\x12\xf6\x8e\xf1\x38\x4f\x0c\x77\x91\x1e\x63\x3c\x94\xe5\xa2\x28\x2e\x2a\x07\xd0\x97\xc6\x02\x3c\x57\xe4\x07\xb4\x7b\x70\x45\xec\x18\x97\xe3\xc4\x70\x5a\x5b\x1e\x47\xc6\xb1\xf7\x32\xb9\x81\xf7\x11\xab\x66\xb7\x6c\x19\x89\x05\x79\x7e\x40\xbb\x67\xbc\x67\x9e\xc7\xf3\xb4\x23\xc5\x1a\xf3\x67\xcd\x4d\xe0\xcc\x0a\xfc\x73\x23\xa2\x63\x10\x67\xcc\x1f\xc8\x15\x63\x81\xc6\x2c\xcd\x07\x9e\xee\x35\xde\x03\xb7\xc6\x11\x0f\xaf\xc6\xc7\xdd\xbb\x5f\xca\xf8\x22\xef\x2a\xb8\x36\x8e\xe4\x3d\xaf\x35\xaf\xc7\x01\x63\x14\xee\xb3\x36\x60\xbe\xc6\x7d\xcf\x0f\x18\xf3\x6c\xae\x43\x7f\x0f\xbb\x0a\xe6\x61\x3d\xf8\xc2\xbe\xbd\xe1\xe5\xd7\x0e\x66\xb2\xef\xf0\xa1\x52\xc2\xfe\x10\x3c\x4f\xb1\xe3\xf0\x3e\x39\x99\xbb\x74\x7e\x84\x03\xad\x8d\xc8\x01\x7e\x63\x6d\xe0\x8d\x58\xac\x0d\xa8\xee\xd5\xee\x59\x4b\xc5\x6c\x9d\x2d\xea\x41\xf4\xb7\xb8\xf6\x1f\x3f\xb6\x4e\xf4\x7a\x19\x0e\x94\x0b\xdb\x1f\xd7\x81\x35\xc6\x01\x6d\x9e\xba\xa4\x1f\x78\x36\xc0\xbd\x9d\xda\xbd\xf5\x79\x4f\xf7\xc8\x0d\xe0\xd6\xc3\xda\xf8\x78\x7d\x6b\xc5\x72\xa1\x3c\x78\x5c\x90\x07\x3c\x83\xdf\xf8\xee\xf9\x00\xeb\x72\xeb\x07\x8c\xe3\x76\x7f\x84\xef\xb8\x8e\x31\xd4\x56\x62\x31\x1b\x3c\xc1\xfe\x2c\x76\x0f\x63\x91\x14\x71\xa0\x5c\xb0\x1f\x79\xe0\xb5\xd8\x1e\x41\xeb\x40\xf8\x01\xc4\xdb\x1f\xe2\x3b\xb0\xc1\x46\xa0\xd3\x98\xcf\x13\x3b\xc6\x23\xff\x1e\xee\x77\xe7\x3e\x18\xb6\x79\xe2\xe1\xb7\x1c\xe8\x6f\xf4\x27\x6e\xce\x0d\xdf\xfb\xe4\xc7\x1f\x86\x7e\x60\x39\x60\x2c\x60\x7d\x8c\x16\xf8\x6d\xfc\x43\x1f\xf8\xbc\xee\xf3\x3d\x1e\xd0\x8f\x6b\x52\xec\x45\x58\x8b\x38\x28\x8a\x93\xe8\xf3\xe5\xa7\xef\x8f\xf8\x93\xda\x01\xec\x31\xb6\x4f\x64\x5d\x00\xfd\x22\x5e\x21\xcf\xdb\xfa\x07\xd7\x18\x33\xf2\x74\xaf\x3e\x1f\xc3\x8e\x75\xc6\x44\xef\xe7\xe1\xf7\x62\x0a\xfa\x6b\x6b\xe3\x21\xf3\x9f\xc5\x4f\x3f\x40\xfb\xce\xa1\x03\xdf\x79\x35\x20\xf0\x17\xe5\x79\xd6\x83\x98\x73\x5c\xdc\x56\x60\xb3\xd0\x19\x5a\xfc\xf6\x72\x84\xc6\x4f\x62\xb6\xdf\xd5\x0f\xa0\xdf\x98\x0d\x30\xa6\x61\x5f\xe7\xd5\xbf\xcc\x7f\xb1\x78\x8f\xdf\xcc\xf3\x5c\x43\x1e\x6e\xe2\x62\xeb\xe9\x1e\xf7\xf4\x9a\xe2\xb1\x31\x92\xf7\x69\x33\x5e\xfc\xa4\x7f\x7b\x36\x40\x3f\xc0\x35\xe4\x3b\x5b\xff\xe1\x5e\x2c\xc7\x33\xd7\x71\x7f\x6d\xf1\x7b\x3c\x58\xfc\x5e\x6c\xc4\x3d\xbd\xc6\x38\xe7\x8d\x6f\x7d\xc6\x0a\xf1\x43\x47\x9e\xfe\xc1\x0b\x5a\xe0\xb1\xfe\xcf\xf8\xe7\xed\xcb\x75\xff\xcf\x1a\xd4\xea\x27\x16\xdb\xb8\x66\xc5\xa8\xba\x87\xfd\x53\xaf\xda\x87\xdf\xd5\x66\x94\x47\x8d\x9d\x8a\x1f\x6b\xe3\xde\x97\x36\xa0\xfa\xe7\x7e\xd0\xc3\x1f\xdb\x87\x31\x2f\x52\xf7\x98\x83\xfe\x1f\xe3\x40\x7f\x5b\xdd\x2b\x77\x36\x9e\x03\x23\xc5\xc6\x4c\xfa\x8a\x97\x3f\xd0\xc2\x6e\xa8\x1f\xac\x95\x3e\x6f\xf1\xe3\x9a\x17\xff\xad\xfe\xbd\xf3\x5e\xe2\xcf\xd3\x3f\xd7\x6b\x6d\x80\x3e\x6a\xf1\x32\x06\xda\x78\x58\x24\x96\x07\xdd\x7b\x71\xcf\xe3\xe1\x47\x1b\xcb\x7f\xb1\x73\x0d\xd6\xd0\xe4\x97\xb5\x48\x51\xde\xb7\x7d\xa8\x73\xc5\x4b\xf1\xf4\x9e\x97\x3f\x75\x1e\xf0\xa9\xd8\x91\xe3\x63\xd8\xb1\xff\xf1\xe2\x3f\x3e\xc8\x0d\xc8\xf1\x96\x03\x5c\x63\xfd\xe4\xc5\x80\xa2\xda\xc6\xfa\xb6\xc6\xc8\xb2\xfa\xce\xd3\x3d\x72\x3f\xed\x1e\x7b\x17\xcf\xf7\x21\xf3\xdf\x9c\xec\x16\x9d\x01\x7a\x1c\xf0\x9d\x97\x72\xc0\x3c\x60\xf1\x59\xbf\xb4\x7b\x03\xeb\x17\xe3\x72\x60\xb1\xd3\xef\xf5\xdc\x13\xf8\x37\x82\xdd\x72\x60\xcf\xb5\x3d\x0e\x34\x5f\x5b\x9b\xd7\x1c\xad\x35\x93\xc5\x5e\x86\x03\xcf\xbe\x34\xe6\x17\x61\xc7\x1e\xa7\x0c\x76\x8f\x03\x15\x8f\x03\xd6\xe1\xb1\x7d\x90\xd6\x29\xd6\xfe\x63\xb5\x51\x9e\xbf\x63\x0c\x6b\xf3\xd3\xc4\xae\x1c\x30\x07\xe4\x71\x00\xe1\x9e\xcc\xe2\xb6\x3e\xa1\xb6\xa2\xbe\x60\x6d\xc1\xab\x25\x98\xe7\x19\xeb\x19\xeb\xaa\xc0\x5e\xc4\x01\xae\x59\x0e\xc8\x83\xd6\xa9\x5e\xbd\xaa\xbc\x58\xdc\xd6\x1f\xf8\x3c\xf7\x79\x9a\xe3\xf5\x4c\x67\x12\x7f\x2f\xc3\x81\x77\x86\xaf\xb9\x51\xeb\x03\xfa\x84\x3d\xb7\xf2\x62\x65\x5e\x1c\xa0\x8f\x33\xaf\x29\x76\xbe\xf3\xae\x1a\xbb\x72\x10\xfb\xff\x1b\x9e\xff\x2a\x07\xd6\x26\xec\x79\x01\xbe\x2b\x47\xb6\x96\xf5\xce\x3f\x88\x9d\xe7\xbf\x1e\x76\xe4\xf7\xaa\xfe\x07\x48\xcf\x08\x2c\x07\x83\xff\x07\x09\xf6\xbd\xbc\xda\x82\x27\xd4\x2d\xf5\xab\x67\xbf\xb6\x1f\xea\x50\xee\xe3\x2c\xee\xaa\xb1\x2b\x07\x7a\xc6\xae\xff\x83\x04\x41\x2d\xc7\xbd\x9c\x77\x96\x9d\x77\xbe\xe7\xf5\xd7\x9c\xc1\xf3\x0d\x0f\xfb\xe9\x53\x73\x47\xaa\xc4\xad\x1f\xec\x9f\xf5\x6c\x51\xff\xd7\xc1\xbe\xef\x8b\xbd\xd3\xcb\x7b\xbf\x67\xaf\xe9\xd9\x9e\x87\xdd\xab\xe7\xab\xfe\xc0\xce\xae\x2c\x9e\x6d\x59\x0e\xbc\xff\x01\xd1\xeb\xf6\xdd\xad\x27\xde\xde\xcd\x13\xc4\xb9\xff\x02\xbb\x7e\x10\x17\xf5\xfd\x6b\xec\xdd\xfc\x34\xde\x73\x2b\x3f\xf0\xf5\x49\x73\xfb\xb4\x3e\xf0\x07\xe8\xe1\x41\x89\x3d\xbf\x9a\xe4\x13\xc2\xdb\xd9\xdf\x70\x1f\xbf\x36\x87\x70\x0f\xed\x4c\x08\x37\xd1\x6e\x1a\xb4\xf5\x10\x1a\x68\xd3\x10\xf8\xd8\x68\x7b\xa8\xd7\x6f\x77\x0c\xda\xcd\xf7\x06\xed\x9d\x7e\x3b\x73\xb3\xdf\x6e\x62\xdb\xec\xb7\xf5\xc6\x68\x9b\xb2\xe5\xfa\x1a\x7e\xcb\x7e\xf5\xe6\x68\x1b\x1b\xb7\x1e\xeb\xcf\xf5\x70\x9d\x5c\x37\xf1\xac\x0d\xf0\x0d\xf1\x92\x87\xe6\x80\x17\xf2\x74\x47\xf9\xdb\x11\x42\xaf\xff\x58\x9f\xa0\x10\xb2\x07\xeb\x21\xfc\x1b\x00\x00\xff\xff\x67\xf5\x09\xd4\xae\x2f\x00\x00")

func initWindowsApplicationIcoBytes() ([]byte, error) {
	return bindataRead(
		_initWindowsApplicationIco,
		"init/windows/application.ico",
	)
}

func initWindowsApplicationIco() (*asset, error) {
	bytes, err := initWindowsApplicationIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/windows/application.ico", size: 12206, mode: os.FileMode(420), modTime: time.Unix(1608418956, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/windows/application.ico": initWindowsApplicationIco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		"windows": &bintree{nil, map[string]*bintree{
			"application.ico": &bintree{initWindowsApplicationIco, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
